HOMEWORK 3 SOLUTIONS

Problem 1: Reversing Strings

public class StringReverser {
    /**
     * Reverse a string, recursive version.
     *
     * Recursive formulation:
     *   BASE CASE: If str only has one letter, then the answer is str
     *   RECURSIVE CASE: If str has more than one letter:
     *     char lastChar = last character of str
     *     String smaller = everything in str except the last char
     *     String revSmaller = reverse(smaller)
     *     Answer is lastChar + revSmaller
     */
    public static String reverse1(String str)
    {
        if (str.length() == 1) {  // base case
            return str;
        }
        else {
            char lastChar = str.charAt(str.length()-1);
            String smaller = str.substring(0, str.length()-1);
            String revSmaller = reverse1(smaller);
            return lastChar + revSmaller;
        }
    }

    /**
     * Reverse a string, recursive version 2.
     *
     * Recursive formulation:
     *   BASE CASE: If str only has one letter, then the answer is str
     *   RECURSIVE CASE: If str has more than one letter:
     *     char firstChar = first character of str
     *     String smaller = everything in str except the first char
     *     String revSmaller = ???
     *     Answer is ???
     */
    public static String reverse2(String str)
    {
        if (str.length() == 1) {  // base case
            return str;
        }
        else {
            char firstChar = str.charAt(0);
            String smaller = str.substring(1, str.length());
            String revSmaller = reverse2(smaller);
            return revSmaller + firstChar;
        }
    }

    /**
     * Reverse a string, recursive version 3.
     *
     * Recursive formulation:
     *   BASE CASE: If str only has one letter, then the answer is str
     *   RECURSIVE CASE: If str has more than one letter:
     *     find the midpoint of the string, divide the string in half.
     *     compute the reversed first half of the string
     *     compute the reversed second half of the string
     *     combine the two reversed halves into the answer
     */
    public static String reverse3(String str)
    {
        if (str.length() == 1) {  // base case
            return str;
        }
        else {
            int halfway = str.length()/2;
            String smaller1 = str.substring(0, halfway);
            String smaller2 = str.substring(halfway);
            String revSmaller1 = reverse3(smaller1);
            String revSmaller2 = reverse3(smaller2);
            return revSmaller2 + revSmaller1;
        }
    }

    public static void main(String[] args)
    {
        System.out.println(reverse1("ab"));
        System.out.println(reverse1("abc"));
        System.out.println(reverse1("abcd"));
        System.out.println(reverse1("abcde"));
        System.out.println(reverse2("ab"));
        System.out.println(reverse2("abc"));
        System.out.println(reverse2("abcd"));
        System.out.println(reverse2("abcde"));
        System.out.println(reverse3("ab"));
        System.out.println(reverse3("abc"));
        System.out.println(reverse3("abcd"));
        System.out.println(reverse3("abcde"));
    }
}

Problem 2: Palindrome detection

public class Palindromer {

    /** This function detects if the string given as a parameter
     * is a palindrome or not (reads the same forwards and backwards).
     * Returns true for palindromes, and false otherwise.
     *
     * The idea we will use to solve this problem is:
     * A string str is a palindrome if either:
     *   - it is only one letter long or zero letters long
     *   - its first and last letter are identical, AND the middle letters are a palindrome.
     *      (here, middle letters means everything except the first and last letters).
     *
     * Example: Is the string abcba a palindrome?
     *   Its first and last letters match, so check if bcb is a palindrome:
     *   |  +--> is bcb a palindrome?
     *   |  |    Its first and last letters match, so check if c is a palindrome:
     *   |  |    +--> Is c a palindrome?  It only has one letter, so yes, it is a palindrome.
     *   |  |--> c was a palindrome, so bcb must be a palindrome.
     *   bcb was a palindrome, so abcba must be a palindrome.
     *
     * Recursive formulation:
     * BASE CASE: If the length of the string is ????, then return true.
     * RECURSIVE CASE:
     *    Check if the first and last letters match, AND the middle letters are a palindrome.
     *    If that is all true, then its a palindrome, so return true. Otherwise return false.
     */
    public static boolean isPal(String str) {
        if (str.length() <= 1) return true;
        else if (str.charAt(0) == str.charAt(str.length()-1) && isPal(str.substring(1, str.length()-1)))
            return true;
        else
            return false;
    }

    public static void main(String[] args) {
        System.out.println(isPal("a"));
        System.out.println(isPal("ab"));
        System.out.println(isPal("aba"));
        System.out.println(isPal("anna"));
        System.out.println(isPal("arna"));
        System.out.println(isPal("racecar"));
        System.out.println(isPal("racecars"));
    }
}

Problem 3: Counting prime numbers


public class CountPrimes {
    /** This function returns true if a number >= 2 is prime,
     * and false if it is not prime.
     */
    public static boolean isPrime(int n) {
        for (int divisor = 2; divisor <= n/2; divisor++) {
            if (n % divisor == 0) {
                return false;
            }
        }
        return true;
    }

    /**
     * This function should return the number of numbers between
     * 2 and n that are prime (inclusive).  For instance, if
     * n==10, then the function should return 4, because there
     * are four prime numbers between 2 and 10: 2, 3, 5, and 7.
     *
     * Recursive formulation:
     * BASE CASE: If n==2, return 1 (because there is only 1 prime between 2 and 2, which is 2 itself).
     * RECURSIVE CASE:
     * If n >= 2, then
     *    - If n is not prime, then
     *       - return the number of primes between 2 and ????.  [What is the ???? and how do I compute this value?]
     *    - If n is prime, then
     *       - return (the number of primes between 2 and ????) + ????.  [What should the question marks be replaced by?]
     *
     * Example: How many primes are there between 2 and 4?
     * countPrimes(4)
     * +--> 4 is not prime, so return the number of primes between 2 and 3.
     * +--> In other words, return countPrimes(3)
     * |    +--> 3 is prime, so return (the number of primes between 2 and 2), plus 1.
     * |    +--> In other words, return countPrimes(2) + 1
     * |    |    +--> 2 is the base case, so return 1 from countPrimes(2)
     * |    +--> countPrimes(2) + 1 ==> 1 + 1 ==> 2  (2 is being returned from countPrimes(3))
     * +--> countPrimes(3) ==> 2 [the answer]
     *
     */
    public static int countPrimes(int n) {
        if (n == 2) {  // base case
            return 1;
        }
        else if (n >= 2) {
            int number = countPrimes(n-1);
            if (isPrime(n)) {
                return number + 1;
            } else {
                return number;
            }
        }
        else {
            return -1; // can't happen
        }
    }

    public static void main(String[] args) {
        for (int i = 2; i < 20; i++) {
            int numprimes = countPrimes(i);
            System.out.println("Number of primes less than or equal to " + i + " is " + numprimes);
        }
    }
}

